package com.hypodiabetic.happ;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.graphics.Color;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.text.format.DateFormat;

import com.hypodiabetic.happ.code.nightwatch.Bg;
import com.hypodiabetic.happ.code.nightwatch.BgGraphBuilder;
import com.hypodiabetic.happ.code.nightwatch.Constants;

import org.json.JSONArray;
import org.json.JSONObject;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.TimeZone;

import lecho.lib.hellocharts.formatter.ColumnChartValueFormatter;
import lecho.lib.hellocharts.formatter.ValueFormatterHelper;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Column;
import lecho.lib.hellocharts.model.ColumnChartData;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.SubcolumnValue;
import lecho.lib.hellocharts.model.ValueShape;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.util.ChartUtils;
import lecho.lib.hellocharts.view.Chart;

/**
 * Created by tim on 12/08/2015.
 */

//Extends the NightWatch BgGraphBuilder class to add additional lines
public class ExtendedGraphBuilder extends BgGraphBuilder  {

    protected ExtendedGraphBuilder(Context context){
        super(context);
    }

    public Double yIOBMax = 20D;
    public Double yIOBMin = 0D;
    public Double yCOBMax = 80D;
    public Double yCOBMin = 0D;

    private final List<historicalIOBCOB> iobReadings = historicalIOBCOB.latestForGraphIOB(numValues, start_time * fuzz);
    private List<SubcolumnValue> iobValues = new ArrayList<>();
    private ColumnChartData columnData;
    private ValueFormatterHelper valueFormatterHelper = new ValueFormatterHelper();

    private final List<historicalIOBCOB> cobReadings = historicalIOBCOB.latestForGraphCOB(numValues, start_time * fuzz);
    private List<PointValue> cobValues = new ArrayList<PointValue>();



    public ColumnChartData iobcobFutureChart(JSONArray iobcobValues) { //data*

        List<Column> columnsData = new ArrayList<>();
        List<SubcolumnValue> values;
        Axis axisY = new Axis();
        List<AxisValue> xAxisValues = new ArrayList<AxisValue>();


        try {
            for (int v=0; v<=iobcobValues.length(); v++) {
                //iob now
                values = new ArrayList<>();
                values.add(new SubcolumnValue((float) (iobcobValues.getJSONObject(v).getDouble("iob")), ChartUtils.COLOR_GREEN));
                values.add(new SubcolumnValue((float) (iobcobValues.getJSONObject(v).getDouble("cob")), ChartUtils.COLOR_ORANGE));

                Column column = new Column(values);
                column.setHasLabels(true);
                columnsData.add(column);

                AxisValue axisValue = new AxisValue(v);
                axisValue.setLabel(iobcobValues.getJSONObject(v).getString("when"));
                xAxisValues.add(axisValue);
                //xAxisValues.  add(new AxisValue((long)0, iobcobValues.getJSONObject(v).getString("when")));
            }
        } catch (Exception e)  {

        }

        columnData = new ColumnChartData(columnsData);

        //axisY.setName("Y");
        Axis axisX = new Axis(xAxisValues).setHasLines(true);

        columnData.setAxisYLeft(axisY);
        columnData.setAxisXBottom(axisX);

        //ColumnChartData columnData = new ColumnChartData(defaultColumns());
        //columnData.setAxisYLeft(yAxis());
        //columnData.setAxisYRight(yAxisRight());
        //columnData.setAxisXBottom(xAxis());
        //columnData.setAxisXBottom(null);
        //columnData.setAxisYLeft(null);
        return columnData;
    }

    public Axis xiobAxis() {
        double endHour = 0;

        Axis xAxis = new Axis();
        xAxis.setAutoGenerated(false);
        List<AxisValue> xAxisValues = new ArrayList<AxisValue>();
        GregorianCalendar now = new GregorianCalendar();
        GregorianCalendar today = new GregorianCalendar(now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH));
        final java.text.DateFormat timeFormat = hourFormat();
        timeFormat.setTimeZone(TimeZone.getDefault());
        double start_hour_block = today.getTime().getTime();
        double timeNow = new Date().getTime();
        for(int l=0; l<=24; l++) {
            if ((start_hour_block + (60000 * 60 * (l))) <  timeNow) {
                if((start_hour_block + (60000 * 60 * (l + 1))) >=  timeNow) {
                     endHour = start_hour_block + (60000 * 60 * (l));
                    l=25;
                }
            }
        }
        for(int l=0; l<=24; l++) {
            double timestamp = (endHour - (60000 * 60 * l));
            xAxisValues.add(new AxisValue((long)(timestamp/fuzz), (timeFormat.format(timestamp)).toCharArray()));
        }
        xAxis.setValues(xAxisValues);
        xAxis.setHasLines(true);
        //xAxis.setTextSize(axisTextSize);
        return xAxis;
    }
    private SimpleDateFormat hourFormat() {
        return new SimpleDateFormat(DateFormat.is24HourFormat(context) ? "HH" : "h a");
    }

    public Axis yIOBAxis() {
        Axis yAxis = new Axis();
        yAxis.setAutoGenerated(false);
        List<AxisValue> axisValues = new ArrayList<AxisValue>();

        for(int j = 1; j <= 20; j += 1) {

                axisValues.add(new AxisValue(j));

        }
        yAxis.setValues(axisValues);
        yAxis.setHasLines(true);
        yAxis.setMaxLabelChars(5);
        yAxis.setInside(true);
        return yAxis;
    }

    public List<Column> defaultColumns() { //columns*

        addIOBValues(); //values?*
        List<Column> columns = new ArrayList<>();
        columns.add(iobValuesLine());

        return columns;
    }

    public Column iobValuesLine(){
        Column iobValuesColumn = new Column(iobValues);
        //iobValuesColumn.setColor(ChartUtils.COLOR_GREEN);
        //iobValuesColumn.setHasLines(false);
        //iobValuesColumn.setShape(ValueShape.SQUARE);
        //iobValuesColumn.setPointRadius(2);
        //iobValuesColumn.setHasPoints(true);
        //iobValuesColumn.setFilled(true);
        return iobValuesColumn;
    }
    public Line cobValuesLine(){
        Line cobValuesLine = new Line(cobValues);
        cobValuesLine.setColor(ChartUtils.COLOR_VIOLET);
        cobValuesLine.setHasLines(false);
        cobValuesLine.setPointRadius(2);
        cobValuesLine.setHasPoints(true);
        cobValuesLine.setCubic(true);
        cobValuesLine.setShape(ValueShape.DIAMOND);
        return cobValuesLine;
    }

    public void addIOBValues(){
        for (historicalIOBCOB iobReading : iobReadings) {
            if (iobReading.value > yIOBMax) {
                //iobValues.add(new PointValue((float) (iobReading.datetime/fuzz), (float) yIOBMax.floatValue())); //Do not go above Max IOB
            } else if (iobReading.value < yIOBMin) {
                //iobValues.add(new PointValue((float) (iobReading.datetime/fuzz), (float) yIOBMin.floatValue())); //Do not go below Min IOB
            } else {
                iobValues.add(new SubcolumnValue((float) (iobReading.datetime / fuzz), (int)iobReading.value));
                //iobValues.add(new PointValue((float) (iobReading.datetime / fuzz), (float) fitIOBRange(iobReading.value)));
            }
        }
    }
    public void addCOBValues(){
        for (historicalIOBCOB cobReading : cobReadings) {
            if (cobReading.value > yCOBMax) {
                cobValues.add(new PointValue((float) (cobReading.datetime/fuzz), (float) yCOBMax.floatValue())); //Do not go above Max COB
            } else if (cobReading.value < yCOBMin) {
                cobValues.add(new PointValue((float) (cobReading.datetime/fuzz), (float) yCOBMin.floatValue())); //Do not go below Min COB
            } else {
                cobValues.add(new PointValue((float) (cobReading.datetime / fuzz), (float) fitCOBRange(cobReading.value)));
            }
        }
    }

    public double fitIOBRange(double value){                                                        //Converts a IOB value to the Bg Chart Range
        Double yBgMax = defaultMaxY;
        Double yBgMin = defaultMinY;

        Double percent = (value - yIOBMin) / (yIOBMax - yIOBMin);
        return percent * (yBgMax - yBgMin) + yBgMin;
    }
    public double fitBG2IOBRange(double value){                                                     //Converts a Bg value to the IOB Min and Max value
        Double yBgMax = yIOBMax;
        Double yBgMin = yIOBMin;

        Double percent = (value - defaultMinY) / (defaultMaxY - defaultMinY);
        return percent * (yBgMax - yBgMin) + yBgMin;
    }
    public double fitCOBRange(double value){                                                        //Converts a COB value to the Bg Chart Range
        Double yBgMax = defaultMaxY;
        Double yBgMin = defaultMinY;

        Double percent = (value - yCOBMin) / (yCOBMax - yCOBMin);
        return percent * (yBgMax - yBgMin) + yBgMin;
    }
    public double fitBG2COBRange(double value){                                                     //Converts a Bg value to the COB Min and Max range
        Double yBgMax = yCOBMax;
        Double yBgMin = yCOBMin;

        Double percent = (value - defaultMinY) / (defaultMaxY - defaultMinY);
        return percent * (yBgMax - yBgMin) + yBgMin;
    }


    public Axis yAxisRight() {
        Axis yAxisRight = new Axis();
        yAxisRight.setAutoGenerated(false);
        List<AxisValue> axisValues = new ArrayList<AxisValue>();

        for(int j = 0; j <= 12; j += 1) {
            //    axisValues.add(new AxisValue(j));
            if (doMgdl) {
                //axisValues.add(new AxisValue(j * 25)); //US
                AxisValue value = new AxisValue(j * 50);
                value.setLabel(String.valueOf(Math.round(fitBG2COBRange(j * 50))));
                axisValues.add(value);
            } else {
                axisValues.add(new AxisValue(j));
            }
        }
        yAxisRight.setValues(axisValues);
        yAxisRight.setHasLines(true);
        yAxisRight.setMaxLabelChars(5);
        yAxisRight.setInside(true);
        yAxisRight.setName("COB (Violet)");
        return yAxisRight;
    }

}
